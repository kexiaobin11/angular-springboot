name: Deploy to Alibaba Cloud ECS
run-name: test cd

on:
  push:
    branches: [ main ]
    tags:
       '*'
env: 
  PROJECT_NAME: test
  DB_NAME: "test"
  DB_USER: "test"
  DB_PASSWORD: "test"
  DB_ROOT_PASSWORD: "yunzhi.club"
  HTTP_EXPORT_PORT: 17135
  DB_EXPORT_PORT: 17134      
    

jobs:
  api-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up JDK17
        uses: actions/setup-java@v3
        with: 
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: build
        run: |
            cd sprinBootStudy
            env
            mvn -v
            mvn package -Dmaven.test.skip
            mv target/*.jar ../app.jar
            ls -l ../
            
      - name: Upload API Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: app.jar
            
  deploy:
    runs-on: ubuntu-latest
    needs: [api-build]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Download API Artifact
      uses: actions/download-artifact@v4
      with:
        name: app-jar
        path: app.jar # 指定下载到的路径
        
    - name: List downloaded files
      run: ls -l /home/runner/work/angular-springboot/angular-springboot/


    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.ALIYUN_SERVER_PRIVATE_KEY }}

    - name: Create Directories
      run: |
        ssh -o StrictHostKeyChecking=no root@${{ secrets.ALIYUN_SERVER_HOST }} << 'EOF'
        ls -a -l
        mkdir -p /home/app/${{ env.PROJECT_NAME }}
        mkdir -p /home/app/${{ env.PROJECT_NAME }}/db
        mkdir -p /home/app/${{ env.PROJECT_NAME }}/backups
        EOF
    - name: Clean Previous Configurations
      run: |
        ssh -o StrictHostKeyChecking=no root@${{ secrets.ALIYUN_SERVER_HOST }} << 'EOF'
        rm -f /home/app/${{ env.PROJECT_NAME }}/nginx.conf
        rm -f /home/app/${{ env.PROJECT_NAME }}/app.jar
        rm -f /home/app/${{ env.PROJECT_NAME }}/application.yml
        rm -rf /home/app/${{ env.PROJECT_NAME }}/web
        EOF
    - name: Copy app.jar to ECS
      run: |
         scp -o StrictHostKeyChecking=no /home/runner/work/angular-springboot/angular-springboot/app.jar/app.jar root@${{ secrets.ALIYUN_SERVER_HOST }}:/home/app/${{ env.PROJECT_NAME }}/app.jar
    - name: Stop Eixisting Containers
      run: |
       ssh -o StrictHostKeyChecking=no root@${{ secrets.ALIYUN_SERVER_HOST }} << 'EOF'
        if [ "$(docker ps -a -q -f name=${{ env.PROJECT_NAME }}-nginx)" ]; then
            echo "${{ env.PROJECT_NAME }}-nginx exist"
            else
              echo "create ${{ env.PROJECT_NAME }}-nginx"
              docker create -p ${{ env.HTTP_EXPORT_PORT }}:80 --cpus=1 --memory=1G --name=${{ env.PROJECT_NAME }}-nginx \
              --network=${{ env.PROJECT_NAME }}-network \
              -v /home/app/${{ env.PROJECT_NAME }}/web:/usr/share/nginx/html:ro \
              -v /home/app/${{ env.PROJECT_NAME }}/nginx.conf:/etc/nginx/conf.d/default.conf:ro \
              nginx
            fi

          if [ "$(docker ps -a -q -f name=${{ env.PROJECT_NAME }}-db)" ]; then
              echo "${{ env.PROJECT_NAME }}-db exist"
            else
              echo "create ${{ env.PROJECT_NAME }}-db"
              docker create --cpus=1 --memory=2G --name=${{ env.PROJECT_NAME }}-db \
              -p ${{ env.DB_EXPORT_PORT }}:3306 \
              --network=${{ env.PROJECT_NAME }}-network \
              -e MYSQL_ROOT_PASSWORD=${{ env.DB_ROOT_PASSWORD }} -e MYSQL_DATABASE=${{ env.DB_NAME }} \
              -e MYSQL_USER=${{ env.DB_USER }} -e MYSQL_PASSWORD=${{ env.DB_PASSWORD }} \
              -v /home/app/${{ env.PROJECT_NAME }}/db:/var/lib/mysql \
              mysql:8.0 \
              --character-set-server=utf8mb4 \
              --collation-server=utf8mb4_unicode_ci
            fi  

         if [ "$(docker ps -a -q -f name=${{ env.PROJECT_NAME }}-api)" ]; then
                echo "${{ env.PROJECT_NAME }}-api exist"
            else
              echo "create ${{ env.PROJECT_NAME }}-api"
                docker create --cpus=2 --memory=4G --name=${{ env.PROJECT_NAME }}-api \
                --network=${{ env.PROJECT_NAME }}-network \
                --workdir=/opt/app \
                -v /home/app/${{ env.PROJECT_NAME }}:/opt/app \
                maven:3.8.1-openjdk-17-slim  \
                java -jar app.jar \
                --spring.config.location=/opt/app/
            fi
        EOF
